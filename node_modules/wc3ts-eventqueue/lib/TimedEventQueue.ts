import { Trigger } from "w3ts";
import {TimedEvent} from "./TimedEvent";
import {WCEventQueue} from "./EventQueue";


/**
 * Runs events every 1 milliseconds
 */
export class WCTimedEventQueue {
    private ticker: Trigger;
    private tick: number = 0;
    private maxTick: number = 100000;
    private events: Map<string, TimedEvent> = new Map<string, TimedEvent>();
    private eventQueue: WCEventQueue;

    constructor(eventQueue: WCEventQueue) {
        this.eventQueue = eventQueue;
        this.ticker = new Trigger();
        this.ticker.registerTimerEvent(0.001, true);

        this.ticker.addAction(() => {
            this.tick = (this.tick + 1) % this.maxTick;
            this.HandleTick();
        });
    }

    private HandleTick(): void {
        this.events.forEach(((event: TimedEvent, key: string) => {
            if (event.AttemptAction(this.tick, this.eventQueue)) {
                this.events.delete(key);
            }
        }));
    }


    public AddEvent(event: TimedEvent): void {
        this.events.set(WCTimedEventQueue.RandomHash(10), event);
    }
    public CreateEvent(action: () => void, timeout: number): void {
        this.events.set(WCTimedEventQueue.RandomHash(10), new TimedEvent(() => action(), timeout));
    }

    public static RandomHash(length: number): string {
        let result: string = '';
        const characters: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength: number = characters.length;
        for (let i: number = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }


}
