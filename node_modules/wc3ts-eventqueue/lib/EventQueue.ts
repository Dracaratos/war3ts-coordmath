import {Trigger} from "w3ts";
import {Queue} from "./Queue";
import {WCTimedEventQueue} from "./TimedEventQueue";

/**
 * Runs events every 1 milliseconds
 */
export class WCEventQueue {
    private highPriority: Queue<() => void> = new Queue<() => void>();
    private medPriority: Queue<() => void> = new Queue<() => void>();
    private lowPriority: Queue<() => void> = new Queue<() => void>();
    private ticker: Trigger;
    private readonly maxEventsPerTick: number = 2;
    private currentTask: (() => void) | undefined = undefined;


    constructor() {
        this.ticker = new Trigger();
        this.ticker.registerTimerEvent(0.001, true);
        this.ticker.addAction(() => {
            this.HandleTick();
        });
    }

    private HandleTick(): void {
        if (this.currentTask) {
            for (let i: number = 0; i < this.maxEventsPerTick; i++) {
                if (this.currentTask) {
                    this.currentTask();
                    this.currentTask = undefined;

                } else {
                    this.GetTask();
                }
            }
        } else {
            this.GetTask();
        }

    }

    private GetTask(): void {
        if (this.highPriority.size() > 0) {
            this.currentTask = this.highPriority.pop();
            return;
        }
        if (this.medPriority.size() > 0) {
            this.currentTask = this.medPriority.pop();
            return;
        }
        if (this.lowPriority.size() > 0) {
            this.currentTask = this.lowPriority.pop();
            return;
        }
    }

    public AddHigh(event: () => void): void {
        this.highPriority.push(event);
    }

    public AddMed(event: () => void): void {
        this.medPriority.push(event);
    }

    public AddLow(event: () => void): void {
        this.lowPriority.push(event);
    }
}

export const EventQueue = new WCEventQueue();
export const TimedEventQueue = new WCTimedEventQueue(EventQueue);
