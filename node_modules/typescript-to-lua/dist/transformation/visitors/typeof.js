"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const lua = require("../../LuaAST");
const LuaLib_1 = require("../../LuaLib");
const lualib_1 = require("../utils/lualib");
const binary_expression_1 = require("./binary-expression");
exports.transformTypeOfExpression = (node, context) => {
    const innerExpression = context.transformExpression(node.expression);
    return lualib_1.transformLuaLibFunction(context, LuaLib_1.LuaLibFeature.TypeOf, node, innerExpression);
};
function transformTypeOfBinaryExpression(context, node) {
    const operator = node.operatorToken.kind;
    function transformTypeOfLiteralComparison(typeOfExpression, comparedExpression) {
        if (comparedExpression.value === "object") {
            comparedExpression.value = "table";
        }
        else if (comparedExpression.value === "undefined") {
            comparedExpression.value = "nil";
        }
        const innerExpression = context.transformExpression(typeOfExpression.expression);
        const typeCall = lua.createCallExpression(lua.createIdentifier("type"), [innerExpression], typeOfExpression);
        return binary_expression_1.transformBinaryOperation(context, typeCall, comparedExpression, operator, node);
    }
    if (operator === ts.SyntaxKind.EqualsEqualsToken ||
        operator === ts.SyntaxKind.EqualsEqualsEqualsToken ||
        operator === ts.SyntaxKind.ExclamationEqualsToken ||
        operator === ts.SyntaxKind.ExclamationEqualsEqualsToken) {
        if (ts.isTypeOfExpression(node.left)) {
            const right = context.transformExpression(node.right);
            if (lua.isStringLiteral(right)) {
                return transformTypeOfLiteralComparison(node.left, right);
            }
        }
        else if (ts.isTypeOfExpression(node.right)) {
            const left = context.transformExpression(node.left);
            if (lua.isStringLiteral(left)) {
                return transformTypeOfLiteralComparison(node.right, left);
            }
        }
    }
}
exports.transformTypeOfBinaryExpression = transformTypeOfBinaryExpression;
//# sourceMappingURL=typeof.js.map