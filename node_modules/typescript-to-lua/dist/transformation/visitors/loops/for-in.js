"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const lua = require("../../../LuaAST");
const errors_1 = require("../../utils/errors");
const typescript_1 = require("../../utils/typescript");
const identifier_1 = require("../identifier");
const utils_1 = require("./utils");
exports.transformForInStatement = (statement, context) => {
    if (typescript_1.isArrayType(context, context.checker.getTypeAtLocation(statement.expression))) {
        throw errors_1.ForbiddenForIn(statement);
    }
    // Transpile expression
    const pairsIdentifier = lua.createIdentifier("pairs");
    const expression = context.transformExpression(statement.expression);
    const pairsCall = lua.createCallExpression(pairsIdentifier, [expression]);
    const body = lua.createBlock(utils_1.transformLoopBody(context, statement));
    // Transform iteration variable
    // TODO: After the transformation pipeline refactor we should look at refactoring this together with the
    // for-of initializer transformation.
    let iterationVariable;
    if (ts.isVariableDeclarationList(statement.initializer)) {
        const binding = utils_1.getVariableDeclarationBinding(statement.initializer);
        if (!ts.isIdentifier(binding)) {
            throw errors_1.UnsupportedForInVariable(statement.initializer);
        }
        iterationVariable = identifier_1.transformIdentifier(context, binding);
    }
    else if (ts.isIdentifier(statement.initializer)) {
        // Iteration variable becomes ____key
        iterationVariable = lua.createIdentifier("____key");
        // Push variable = ____key to the start of the loop body to match TS scoping
        const initializer = lua.createAssignmentStatement(identifier_1.transformIdentifier(context, statement.initializer), iterationVariable);
        body.statements.unshift(initializer);
    }
    else {
        // This should never occur
        throw errors_1.UnsupportedForInVariable(statement.initializer);
    }
    return lua.createForInStatement(body, [iterationVariable], [pairsCall], statement);
};
//# sourceMappingURL=for-in.js.map