export declare const normalizeSlashes: (filePath: string) => string;
export declare const trimExtension: (filePath: string) => string;
export declare function formatPathToLuaPath(filePath: string): string;
declare type NoInfer<T> = [T][T extends any ? 0 : never];
export declare function getOrUpdate<K, V>(map: Map<K, V> | (K extends object ? WeakMap<K, V> : never), key: K, getDefaultValue: () => NoInfer<V>): V;
export declare function isNonNull<T>(value: T | undefined | null): value is T;
export declare function cast<TOriginal, TCast extends TOriginal>(item: TOriginal, cast: (item: TOriginal) => item is TCast): TCast;
export declare function castEach<TOriginal, TCast extends TOriginal>(items: TOriginal[], cast: (item: TOriginal) => item is TCast): TCast[];
export declare function assertNever(_value: never): never;
export declare function assume<T>(_value: any): asserts _value is T;
export {};
