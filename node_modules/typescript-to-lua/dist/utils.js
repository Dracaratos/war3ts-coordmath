"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
exports.normalizeSlashes = (filePath) => filePath.replace(/\\/g, "/");
exports.trimExtension = (filePath) => filePath.slice(0, -path.extname(filePath).length);
function formatPathToLuaPath(filePath) {
    filePath = filePath.replace(/\.json$/, "");
    if (process.platform === "win32") {
        // Windows can use backslashes
        filePath = filePath.replace(/\.\\/g, "").replace(/\\/g, ".");
    }
    return filePath.replace(/\.\//g, "").replace(/\//g, ".");
}
exports.formatPathToLuaPath = formatPathToLuaPath;
function getOrUpdate(map, key, getDefaultValue) {
    if (!map.has(key)) {
        map.set(key, getDefaultValue());
    }
    return map.get(key);
}
exports.getOrUpdate = getOrUpdate;
function isNonNull(value) {
    return value !== undefined && value !== null;
}
exports.isNonNull = isNonNull;
function cast(item, cast) {
    if (cast(item)) {
        return item;
    }
    else {
        throw new Error(`Failed to cast value to expected type using ${cast.name}.`);
    }
}
exports.cast = cast;
function castEach(items, cast) {
    if (items.every(cast)) {
        return items;
    }
    else {
        throw new Error(`Failed to cast all elements to expected type using ${cast.name}.`);
    }
}
exports.castEach = castEach;
function assertNever(_value) {
    throw new Error("Value is expected to be never");
}
exports.assertNever = assertNever;
function assume(_value) { }
exports.assume = assume;
//# sourceMappingURL=utils.js.map